package test

import (
	"io/ioutil"
	"strings"
	"testing"

	"github.com/bbayazit16/mnemo/pkg/compiler"
)

func ox(str *string) {
	*str = strings.ReplaceAll(*str, "0x", "")
}

func lower(str *string) {
	*str = strings.ToLower(*str)
}

// Some test items were stolen from comments in Ethernaut's EVM golf threads. See
// https://twitter.com/the_ethernaut/status/1502405820465795073
var correctCompilations = map[string]string{

	// https://twitter.com/721Orbit/status/1501138849887567873
	"1.evm": "433D5260203DF3",

	// https://twitter.com/lightclients/status/1502253991652175877
	"2.evm": "587f3940e9ee00000000000000000000000000000000000000000000000000000000815259818181807357ab1ec28d129707052df4df418d58a2d46d5f515afa82518355334260a01b184655",

	// Push padding test.
	"3.evm": "63000000147F000000000000000000000000000000000000000000000000000000000000000a5050aa",

	// https://mumbai.polygonscan.com/address/0x5a3f7b99d1cdfe874d109c95576a20a2ddaa6623#code
	// (Invalid opcodes and Solidity init code removed)
	"4.evm": "608060405234801561001057600080fd5b506004361061002b5760003560e01c8063da9fc7d414610030575b600080fd5b61003861004e565b604051610045919061010d565b60405180910390f35b606060006040518060600160405280602181526020016101306021913990508091505090565b600081519050919050565b600082825260208201905092915050565b60005b838110156100ae578082015181840152602081019050610093565b838111156100bd576000848401525b50505050565b6000601f19601f8301169050919050565b60006100df82610074565b6100e9818561007f565b93506100f9818560208601610090565b610102816100c3565b840191505092915050565b6000602082019050818103600083015261012781846100d4565b9050929150505613150360326237946963497236494393723349726349763924762379a2646970667358221220507d6d3d11fd4582a7b691e7cc60c2cda49ffe2038e7347969279675bd03e55564736f6c634300080033",

	// Random contract from Optimism verified contracts:
	// https://optimistic.etherscan.io/address/0xE8ee02Aeffc506d5F1Df9e78f2AD189b0ae78B3e#code
	// Removed constructor: (608060405234801561001057600080fd5b50604051610c8b380380610c8b83398101604081905261002f916100e2565b61003833610076565b6000805460ff60a01b19169055600180546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055610115565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100dd57600080fd5b919050565b600080604083850312156100f557600080fd5b6100fe836100c6565b915061010c602084016100c6565b90509250929050565b610b67806101246000396000f3fe
	// Removed constructor args: 000000000000000000000000a66ac7ed58fb0faa48ce0c44ca5977ff8c524c5600000000000000000000000013e3ee699d1909e989722e753853ae30b17e08c5
	"5.evm": "6080604052600436106100c25760003560e01c80638456cb591161007f578063b7fafcd711610059578063b7fafcd714610208578063cbaf78a714610228578063cbd3df381461023b578063f2fde38b1461025b57600080fd5b80638456cb59146101b55780638da5cb5b146101ca578063b69ef8a8146101e857600080fd5b8063355d2797146100c75780633f4ba83a146101075780635c975abb1461011e5780635f9f353b14610148578063715018a614610168578063741bef1a1461017d575b600080fd5b3480156100d357600080fd5b506100f46100e23660046109d6565b60036020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561011357600080fd5b5061011c61027b565b005b34801561012a57600080fd5b50600054600160a01b900460ff1660405190151581526020016100fe565b34801561015457600080fd5b5061011c610163366004610a83565b6102b8565b34801561017457600080fd5b5061011c610335565b34801561018957600080fd5b5060025461019d906001600160a01b031681565b6040516001600160a01b0390911681526020016100fe565b3480156101c157600080fd5b5061011c610369565b3480156101d657600080fd5b506000546001600160a01b031661019d565b3480156101f457600080fd5b5060015461019d906001600160a01b031681565b34801561021457600080fd5b506100f46102233660046109d6565b61039b565b61011c610236366004610a41565b6104a9565b34801561024757600080fd5b5061011c6102563660046109a2565b6106d7565b34801561026757600080fd5b5061011c6102763660046109a2565b61074b565b6000546001600160a01b031633146102ae5760405162461bcd60e51b81526004016102a590610aad565b60405180910390fd5b6102b66107e6565b565b6000546001600160a01b031633146102e25760405162461bcd60e51b81526004016102a590610aad565b60ff821660008181526003602052604090819020839055517f4653d4e03195792cc3ccc156f8b5e7e79d8c9ffb38eddb428012c14502799d69906103299084815260200190565b60405180910390a25050565b6000546001600160a01b0316331461035f5760405162461bcd60e51b81526004016102a590610aad565b6102b66000610883565b6000546001600160a01b031633146103935760405162461bcd60e51b81526004016102a590610aad565b6102b66108d3565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156103ec57600080fd5b505afa158015610400573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042491906109f1565b505050915050600081136104715760405162461bcd60e51b815260206004820152601460248201527353746f72653a20696e76616c696420707269636560601b60448201526064016102a5565b60ff8316600090815260036020526040902054819061049890670de0b6b3a7640000610b04565b6104a29190610ae2565b9392505050565b600054600160a01b900460ff16156104f65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102a5565b428110156105375760405162461bcd60e51b815260206004820152600e60248201526d14dd1bdc994e88195e1c1a5c995960921b60448201526064016102a5565b60006105428561039b565b9050600081116105945760405162461bcd60e51b815260206004820152601d60248201527f53746f72653a206e65676174697665206f72207a65726f20707269636500000060448201526064016102a5565b828111156105dd5760405162461bcd60e51b815260206004820152601660248201527553746f72653a2065786365737369766520707269636560501b60448201526064016102a5565b6001546001600160a01b031663e578a225336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152600060248201526044810184905260806064820152600960848201526853544f52455f42555960b81b60a482015260c401602060405180830381600087803b15801561065e57600080fd5b505af1158015610672573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069691906109bd565b506040516001600160a01b0385169060ff8716907f2c63ae6df00e90babc5d4997368fce457d90df78673d14a11435b7e4ecc2394090600090a35050505050565b6000546001600160a01b031633146107015760405162461bcd60e51b81526004016102a590610aad565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f70880247142cf113e15f57599afcb48f4cdd196159d882cda54475da68ea996190600090a250565b6000546001600160a01b031633146107755760405162461bcd60e51b81526004016102a590610aad565b6001600160a01b0381166107da5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102a5565b6107e381610883565b50565b600054600160a01b900460ff166108365760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016102a5565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600054600160a01b900460ff16156109205760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102a5565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586108663390565b80356001600160a01b038116811461097257600080fd5b919050565b803560ff8116811461097257600080fd5b805169ffffffffffffffffffff8116811461097257600080fd5b6000602082840312156109b457600080fd5b6104a28261095b565b6000602082840312156109cf57600080fd5b5051919050565b6000602082840312156109e857600080fd5b6104a282610977565b600080600080600060a08688031215610a0957600080fd5b610a1286610988565b9450602086015193506040860151925060608601519150610a3560808701610988565b90509295509295909350565b60008060008060808587031215610a5757600080fd5b610a6085610977565b9350610a6e6020860161095b565b93969395505050506040820135916060013590565b60008060408385031215610a9657600080fd5b610a9f83610977565b946020939093013593505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082610aff57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610b2c57634e487b7160e01b600052601160045260246000fd5b50029056fea2646970667358221220cfc487a36761869265da7f91c6407b03727513fac4510be0dde522655b6c560864736f6c63430008060033",
}

func TestCompile(t *testing.T) {

	files, err := ioutil.ReadDir("./data")

	if err != nil {
		t.Errorf("Error reading data.")
	}

	for _, file := range files {

		cbytes, err := ioutil.ReadFile("./data/" + file.Name())

		if err != nil {
			t.Errorf("Error reading %s.", file.Name())
		}

		compilation, err := compiler.Compile(strings.Split(string(cbytes), "\n"))

		if err != nil {
			t.Errorf("Error compiling %s: %s.", file.Name(), err)
		}

		correct := correctCompilations[file.Name()]

		ox(&correct)
		ox(&compilation)
		lower(&correct)
		lower(&compilation)

		if correct != compilation {
			t.Errorf("Got %s, want %s in %s.", compilation, correct, file.Name())
		}

	}

}

/*


1991 Lines in total

~Â 0.003s / line
~ 300 lines / s

$ make benchmark

	ok      test    (cached)
	go test -bench=. ./test
	goos: darwin
	goarch: amd64
	pkg: test
	cpu: Intel(R) Core(TM) i5-8259U CPU @ 2.30GHz
	BenchmarkCompile_1-8      342529              3007 ns/op
	BenchmarkCompile_2-8      131121              8147 ns/op
	BenchmarkCompile_3-8      222698              4827 ns/op
	BenchmarkCompile_4-8       17722             67878 ns/op
	BenchmarkCompile_5-8        2086            510840 ns/op
	PASS
	ok      test    6.507s

*/

func BenchmarkCompile_1(b *testing.B) {

	cbytes, _ := ioutil.ReadFile("./data/" + "1.evm")

	for i := 0; i < b.N; i++ {

		compiler.Compile(strings.Split(string(cbytes), "\n"))

	}
}

func BenchmarkCompile_2(b *testing.B) {

	cbytes, _ := ioutil.ReadFile("./data/" + "2.evm")

	for i := 0; i < b.N; i++ {

		compiler.Compile(strings.Split(string(cbytes), "\n"))

	}
}

func BenchmarkCompile_3(b *testing.B) {

	cbytes, _ := ioutil.ReadFile("./data/" + "3.evm")

	for i := 0; i < b.N; i++ {

		compiler.Compile(strings.Split(string(cbytes), "\n"))

	}
}

func BenchmarkCompile_4(b *testing.B) {

	cbytes, _ := ioutil.ReadFile("./data/" + "4.evm")

	for i := 0; i < b.N; i++ {

		compiler.Compile(strings.Split(string(cbytes), "\n"))

	}
}

func BenchmarkCompile_5(b *testing.B) {

	cbytes, _ := ioutil.ReadFile("./data/" + "5.evm")

	for i := 0; i < b.N; i++ {

		compiler.Compile(strings.Split(string(cbytes), "\n"))

	}
}
